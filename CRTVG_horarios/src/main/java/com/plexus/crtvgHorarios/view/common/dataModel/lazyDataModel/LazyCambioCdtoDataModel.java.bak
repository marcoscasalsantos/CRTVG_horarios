package com.plexus.crtvg_horarios.view.util.dataModel.lazyDataModel;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;

import com.coremain.baseService.dto.LazyDataDto;
import com.coremain.cambioService.dto.CambioCdto;
import com.coremain.cambioService.service.CambioService;
import com.plexus.crtvg_horarios.view.util.FacesUtils;

public class LazyCambioCdtoDataModel extends LazyDataModel<CambioCdto> {
	
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unchecked")
	@Override
    public CambioCdto getRowData(String rowKey) {

    	List<CambioCdto> wrappedData = (List<CambioCdto>) getWrappedData();
    	
    	for(CambioCdto municipioCdto : wrappedData) {
            if(municipioCdto.getIdCambio().toString().equals(rowKey))
                return municipioCdto;
        }

        return null;        
    }

    @Override
    public Object getRowKey(CambioCdto municipioCdto) {
        return municipioCdto.getIdCambio();
    }

    @SuppressWarnings("unchecked")
	@Override
    public List<CambioCdto> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String,String> filters) {    	
    	
    	if (this.getWrappedData() == null)
    		setWrappedData(new ArrayList<CambioCdto>());
    	
    	CambioService cambioService = FacesUtils.getService("cambioService", CambioService.class);
    	    	
    	// Transformamos el objeto SortOrder propio de Primefaces en una constante de texto: ASC, DESC o "";
    	// Evitamos así acoplar la capa de servicios de negocio con la tecnología de Primefaces propia la capa de presentación
    	String _sortOrder = "";     	
    	if (sortOrder.name().equals("ASCENDING")){
    		_sortOrder = "ASC";
    	}
    	else if (sortOrder.name().equals("DESCENDING")){
    		_sortOrder = "DESC";
    	}
    		    	
    	LazyDataDto<CambioCdto> lazyData = cambioService.getAllCambiosCdtosLazyLoadCdto(first, pageSize, sortField, _sortOrder, filters);
    	
    	setWrappedData(lazyData.getData());
    	    	
    	this.setPageSize(pageSize);
    	this.setRowCount(lazyData.getRowCount()); // Establece el número de filas que cumplen los criterios de filtrado   	
    	    	
    	return (List<CambioCdto>) this.getWrappedData();
    }    
    
}
                    